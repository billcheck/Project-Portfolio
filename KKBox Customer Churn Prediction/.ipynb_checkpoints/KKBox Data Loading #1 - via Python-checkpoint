{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KKBox Customer Churn - Supervised Learning Capstone - Data Loading Methods "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Kaggle Competition: https://www.kaggle.com/c/kkbox-churn-prediction-challenge/data\n",
    "\n",
    "**Scope:** I am trying to see if a user who is active in February 2017, will still be a user in March 2017"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import missingno as msno\n",
    "import sqlite3 as sql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'data/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## - <font color=blue>Summary of Datasets</font> -\n",
    "For this project we are given several massive datasets totaling over 30 GB. In general the datasets are divided into two versions: ***v1*** and ***v2***."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "_____\n",
    "**train_v1:** containing the user ids and whether they churned until ***2/28/2017***.\n",
    "\n",
    "**train_v2:** containing the user ids and whether they churned for the month of ***March 2017***.\n",
    "\n",
    "Features:\n",
    "    - msno: user id\n",
    "    - is_churn: This is the target variable. Churn is defined as whether the user did not continue the subscription within 30 days of expiration. is_churn = 1 means churn,is_churn = 0 means renewal.\n",
    "\n",
    "_____\n",
    "**transactions_v1:** transactions of users up until ***2/28/2017***.\n",
    "\n",
    "**transactions_v2:** transactions of users up until ***3/31/2017***.\n",
    "\n",
    "Features:\n",
    "    - msno: user id\n",
    "    - payment_method_id: payment method\n",
    "    - payment_plan_days: length of membership plan in days\n",
    "    - plan_list_price: in New Taiwan Dollar (NTD)\n",
    "    - actual_amount_paid: in New Taiwan Dollar (NTD)\n",
    "    - is_auto_renew\n",
    "    - transaction_date: format %Y%m%d\n",
    "    - membership_expire_date: format %Y%m%d\n",
    "    - is_cancel: whether or not the user canceled the membership in this transaction.\n",
    "\n",
    "_____\n",
    "**user_log_v1:** transactions of users up until ***2/28/2017***.\n",
    "\n",
    "**user_log_v2:** transactions of users for the month of ***March 2017***.\n",
    "\n",
    "Features:\n",
    "    - msno: user id\n",
    "    - date: format %Y%m%d\n",
    "    - num_25: # of songs played less than 25% of the song length\n",
    "    - num_50: # of songs played between 25% to 50% of the song length\n",
    "    - num_75: # of songs played between 50% to 75% of of the song length\n",
    "    - num_985: # of songs played between 75% to 98.5% of the song length\n",
    "    - num_100: # of songs played over 98.5% of the song length\n",
    "    - num_unq: # of unique songs played\n",
    "    - total_secs: total seconds played\n",
    "\n",
    "_____\n",
    "**members_v3:** All user information data.\n",
    "\n",
    "Features:\n",
    "    - msno: user id\n",
    "    - city\n",
    "    - bd: age. Note: this column has outlier values ranging from -7000 to 2015, please use your judgement.\n",
    "    - gender\n",
    "    - registered_via: registration method\n",
    "    - registration_init_time: format %Y%m%d\n",
    "\n",
    "_____\n",
    "\n",
    "For the most part, ***February 2017*** data will be coming from the ***v1*** files and ***March 2017*** data will be coming from the ***v2*** files. However, since each of these files are very different in terms of structure and units we will import them each one at a time and see if the data needs to be manipulated to ensure uniformity when we merge everything together. Since I have previewed these files already I will be manually asigning data types to each feature in each file so that we can work with all of this a bit more efficiently.\n",
    "\n",
    "All data must be imported in terms of a monthy aggregate. We will also re-use variables when possible to save on memory"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## - <font color=blue>Method #1: Import and handle solely using Python and CPU RAM</font> -\n",
    "For those of you who don't know I am somewhat of a masochist. So much in fact that when I saw that I was about to jump into over 30GBs of data, my first reaction was 'Awesome! Let's see if I can do this all in Python!\" Actually I thought it would be a great excercise to do to really learn how to manage memory when working with large files in Jupyter NB. Below you will find my approach to this."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=green>Import/Preview ***Churn Data*** for February 2017 and March 2017</font> -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Train and set Index to msno\n",
    "train = pd.read_csv(path+'train_v1.csv',index_col='msno', dtype={'is_churn':np.int8})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (992931, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_churn</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>waLDQMmcOu2jLDaV1ddDkgCrB/jl6sD66Xzs0Vqax1Y=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QA7uiXy8vIbUSPOkCf9RwQ3FsT8jVq2OxDr8zqa7bRQ=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fGwBva6hikQmTJzrbz/2Ezjm5Cth5jZUNvXigKK2AFA=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              is_churn\n",
       "msno                                                  \n",
       "waLDQMmcOu2jLDaV1ddDkgCrB/jl6sD66Xzs0Vqax1Y=         1\n",
       "QA7uiXy8vIbUSPOkCf9RwQ3FsT8jVq2OxDr8zqa7bRQ=         1\n",
       "fGwBva6hikQmTJzrbz/2Ezjm5Cth5jZUNvXigKK2AFA=         1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train Preview\n",
    "print('Number of rows  & columns',train.shape)\n",
    "train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Test and set Index to msno\n",
    "test = pd.read_csv(path+'train_v2.csv',index_col='msno', dtype={'is_churn':np.int8})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (970960, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_churn</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ugx0CjOMzazClkFzU2xasmDZaoIqOUAZPsH1q0teWCg=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f/NmvEzHfhINFEYZTR05prUdr+E+3+oewvweYz9cCQE=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zLo9f73nGGT1p21ltZC3ChiRnAVvgibMyazbCxvWPcg=</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              is_churn\n",
       "msno                                                  \n",
       "ugx0CjOMzazClkFzU2xasmDZaoIqOUAZPsH1q0teWCg=         1\n",
       "f/NmvEzHfhINFEYZTR05prUdr+E+3+oewvweYz9cCQE=         1\n",
       "zLo9f73nGGT1p21ltZC3ChiRnAVvgibMyazbCxvWPcg=         1"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test Preview\n",
    "print('Number of rows  & columns',test.shape)\n",
    "test.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Already we can see that ~22,000 people churned from one month to another."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=green>Import/Preview ***Transaction Data*** for February 2017 and March 2017</font> -"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Transaction Data is essentially a snapshot of all user transactions up until ***February 2017 and March 2017*** respective to ***v1 and v2*** data files. Keep in mind that there are multiple entries for users who have multiple transactions. In order to capture both timeframes accurately we will: \n",
    "- Return only the observations with the most recent transactions for each timeframe. This way we can see how many days left of membership they have left with respect to each month and we return the most up-to-date observations for each user.\n",
    "- Left join these dataframes to our Train and Test Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Transactions Train Set\n",
    "trans_train = pd.read_csv(path+'transactions_v1.csv',index_col='msno', parse_dates=['transaction_date','membership_expire_date'],\n",
    "                          dtype={'payment_method_id':np.int8,'payment_plan_days':np.int8,'plan_list_price':np.int8,\n",
    "                                'actual_amount_paid':np.int8,'is_auto_renew':np.int8,'is_cancel':np.int8})\n",
    "\n",
    "# Import Transactions Test Set\n",
    "trans_test = pd.read_csv(path+'transactions_v2.csv',index_col='msno', parse_dates=['transaction_date','membership_expire_date'],\n",
    "                          dtype={'payment_method_id':np.int8,'payment_plan_days':np.int8,'plan_list_price':np.int8,\n",
    "                                'actual_amount_paid':np.int8,'is_auto_renew':np.int8,'is_cancel':np.int8})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (21547746, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_method_id</th>\n",
       "      <th>payment_plan_days</th>\n",
       "      <th>plan_list_price</th>\n",
       "      <th>actual_amount_paid</th>\n",
       "      <th>is_auto_renew</th>\n",
       "      <th>transaction_date</th>\n",
       "      <th>membership_expire_date</th>\n",
       "      <th>is_cancel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=</th>\n",
       "      <td>41</td>\n",
       "      <td>30</td>\n",
       "      <td>-127</td>\n",
       "      <td>-127</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-09-30</td>\n",
       "      <td>2015-11-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=</th>\n",
       "      <td>41</td>\n",
       "      <td>30</td>\n",
       "      <td>-107</td>\n",
       "      <td>-107</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-09-30</td>\n",
       "      <td>2015-10-31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=</th>\n",
       "      <td>41</td>\n",
       "      <td>30</td>\n",
       "      <td>-127</td>\n",
       "      <td>-127</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-09-30</td>\n",
       "      <td>2016-04-27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              payment_method_id  \\\n",
       "msno                                                              \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=                 41   \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=                 41   \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=                 41   \n",
       "\n",
       "                                              payment_plan_days  \\\n",
       "msno                                                              \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=                 30   \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=                 30   \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=                 30   \n",
       "\n",
       "                                              plan_list_price  \\\n",
       "msno                                                            \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=             -127   \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=             -107   \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=             -127   \n",
       "\n",
       "                                              actual_amount_paid  \\\n",
       "msno                                                               \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=                -127   \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=                -107   \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=                -127   \n",
       "\n",
       "                                              is_auto_renew transaction_date  \\\n",
       "msno                                                                           \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=              1       2015-09-30   \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=              1       2015-09-30   \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=              1       2015-09-30   \n",
       "\n",
       "                                             membership_expire_date  is_cancel  \n",
       "msno                                                                            \n",
       "YyO+tlZtAXYXoZhNr3Vg3+dfVQvrBVGO8j1mfqe4ZHc=             2015-11-01          0  \n",
       "AZtu6Wl0gPojrEQYB8Q3vBSmE2wnZ3hi1FbK1rQQ0A4=             2015-10-31          0  \n",
       "UkDFI97Qb6+s2LWcijVVv4rMAsORbVDT2wNXF0aVbns=             2016-04-27          0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# trans_train Preview\n",
    "print('Number of rows  & columns',trans_train.shape)\n",
    "trans_train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (1431009, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_method_id</th>\n",
       "      <th>payment_plan_days</th>\n",
       "      <th>plan_list_price</th>\n",
       "      <th>actual_amount_paid</th>\n",
       "      <th>is_auto_renew</th>\n",
       "      <th>transaction_date</th>\n",
       "      <th>membership_expire_date</th>\n",
       "      <th>is_cancel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=</th>\n",
       "      <td>32</td>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-01-31</td>\n",
       "      <td>2017-05-04</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=</th>\n",
       "      <td>41</td>\n",
       "      <td>30</td>\n",
       "      <td>-107</td>\n",
       "      <td>-107</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-08-09</td>\n",
       "      <td>2019-04-12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=</th>\n",
       "      <td>36</td>\n",
       "      <td>30</td>\n",
       "      <td>-76</td>\n",
       "      <td>-76</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-03-03</td>\n",
       "      <td>2017-04-22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              payment_method_id  \\\n",
       "msno                                                              \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=                 32   \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=                 41   \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=                 36   \n",
       "\n",
       "                                              payment_plan_days  \\\n",
       "msno                                                              \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=                 90   \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=                 30   \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=                 30   \n",
       "\n",
       "                                              plan_list_price  \\\n",
       "msno                                                            \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=               42   \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=             -107   \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=              -76   \n",
       "\n",
       "                                              actual_amount_paid  \\\n",
       "msno                                                               \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=                  42   \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=                -107   \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=                 -76   \n",
       "\n",
       "                                              is_auto_renew transaction_date  \\\n",
       "msno                                                                           \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=              0       2017-01-31   \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=              1       2015-08-09   \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=              1       2017-03-03   \n",
       "\n",
       "                                             membership_expire_date  is_cancel  \n",
       "msno                                                                            \n",
       "++6eU4LsQ3UQ20ILS7d99XK8WbiVgbyYL4FUgzZR134=             2017-05-04          0  \n",
       "++lvGPJOinuin/8esghpnqdljm6NXS8m8Zwchc7gOeA=             2019-04-12          0  \n",
       "+/GXNtXWQVfKrEDqYAzcSw2xSPYMKWNj22m+5XkVQZc=             2017-04-22          0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# trans_test Preview\n",
    "print('Number of rows  & columns',trans_test.shape)\n",
    "trans_test.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (2368222, 8)\n"
     ]
    }
   ],
   "source": [
    "# groupby method to return individual observations with respect to each unique member's most recent transaction and expiration date, assign it back to trans_train\n",
    "idx = trans_train.groupby(trans_train.index)['transaction_date'].transform(max) == trans_train['transaction_date']\n",
    "trans_train = trans_train[idx]\n",
    "\n",
    "idx = trans_train.groupby(trans_train.index)['membership_expire_date'].transform(max) == trans_train['membership_expire_date']\n",
    "trans_train = trans_train[idx]\n",
    "\n",
    "# trans_train grouby and aggregate results\n",
    "print('Number of rows  & columns',trans_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (2368222, 8)\n"
     ]
    }
   ],
   "source": [
    "# groupby method to return individual observations with respect to each unique member's most recent transaction and expiration date, assign it back to trans_test\n",
    "idx = trans_test.groupby(trans_test.index)['transaction_date'].transform(max) == trans_test['transaction_date']\n",
    "trans_test = trans_test[idx]\n",
    "\n",
    "idx = trans_test.groupby(trans_test.index)['membership_expire_date'].transform(max) == trans_test['membership_expire_date']\n",
    "trans_test = trans_test[idx]\n",
    "\n",
    "# trans_train grouby and aggregate results\n",
    "print('Number of rows  & columns',trans_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=green>Import/Preview ***User Log Data*** for February 2017 and March 2017</font> -"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This data is a bit trickier to upload because its in the form of daily activity. Not to mention these files are also over ~30GB\n",
    "- First we will upload both Train and Test Sets VIA Chunking\n",
    "- Then we will aggregate them in terms of Month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import User Log Train \n",
    "size=4e7 # 40 million\n",
    "iter_csv = pd.read_csv(path+'user_logs.csv',chunksize=size,index_col=['msno'],parse_dates=['date'],dtype={'num_25':np.int16,'num_50':np.int16,\n",
    "                                    'num_75':np.int16,'num_985':np.int16,'num_100':np.int16,'num_unq':np.int16})\n",
    "\n",
    "user_log_train = pd.concat([chunk[(chunk['date'] >= '2017-02-01') & (chunk['date'] <= '2017-02-28')] for chunk in iter_csv])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import User Log Test \n",
    "size=4e7 # 40 million\n",
    "iter_csv = pd.read_csv(path+'user_logs_v2.csv',chunksize=size,index_col=['msno'],parse_dates=['date'],dtype={'num_25':np.int16,'num_50':np.int16,\n",
    "                                    'num_75':np.int16,'num_985':np.int16,'num_100':np.int16,'num_unq':np.int16})\n",
    "\n",
    "user_log_test = pd.concat([chunk[(chunk['date'] >= '2017-03-01') & (chunk['date'] <= '2017-03-31')] for chunk in iter_csv])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to aggregate all data by user and monthly units\n",
    "def process_user_log(chunk):\n",
    "    grouped_object=chunk.groupby(chunk.index,sort=False)\n",
    "    func = {'date':['count'], \n",
    "           'num_25':['sum'],'num_50':['sum'],\n",
    "           'num_75':['sum'],'num_985':['sum'],\n",
    "           'num_100':['sum'],'num_unq':['sum'],'total_secs':['sum']}\n",
    "    answer=grouped_object.agg(func)\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aggregate user_log_train into Monthly values\n",
    "user_log_train = process_user_log(user_log_train)\n",
    "\n",
    "# Aggregate user_log_test into Monthly values\n",
    "user_log_test = process_user_log(user_log_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up feature names\n",
    "user_log_train.columns = ['_'.join(col).strip() for col in user_log_train.columns.values]\n",
    "user_log_test.columns = ['_'.join(col).strip() for col in user_log_test.columns.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (1114164, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_count</th>\n",
       "      <th>num_25_sum</th>\n",
       "      <th>num_50_sum</th>\n",
       "      <th>num_75_sum</th>\n",
       "      <th>num_985_sum</th>\n",
       "      <th>num_100_sum</th>\n",
       "      <th>num_unq_sum</th>\n",
       "      <th>total_secs_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mSM/P4XpWcuQUGnhL0vaCDEGjmM/7YaWew6O/eE5mV4=</th>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>76</td>\n",
       "      <td>19865.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q3MXOPoaa2SCN4bnPQ0Jr7o4vuN/F0FVhSLZufI70SM=</th>\n",
       "      <td>16</td>\n",
       "      <td>53.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>230.0</td>\n",
       "      <td>233</td>\n",
       "      <td>57799.781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GI65XroKbX7GEywRnPDVL7xc6ZTy/yGstLrYcIdrH0U=</th>\n",
       "      <td>11</td>\n",
       "      <td>41.0</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>496.0</td>\n",
       "      <td>481</td>\n",
       "      <td>125386.533</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              date_count  num_25_sum  \\\n",
       "msno                                                                   \n",
       "mSM/P4XpWcuQUGnhL0vaCDEGjmM/7YaWew6O/eE5mV4=           4         5.0   \n",
       "q3MXOPoaa2SCN4bnPQ0Jr7o4vuN/F0FVhSLZufI70SM=          16        53.0   \n",
       "GI65XroKbX7GEywRnPDVL7xc6ZTy/yGstLrYcIdrH0U=          11        41.0   \n",
       "\n",
       "                                              num_50_sum  num_75_sum  \\\n",
       "msno                                                                   \n",
       "mSM/P4XpWcuQUGnhL0vaCDEGjmM/7YaWew6O/eE5mV4=           1           2   \n",
       "q3MXOPoaa2SCN4bnPQ0Jr7o4vuN/F0FVhSLZufI70SM=           5           4   \n",
       "GI65XroKbX7GEywRnPDVL7xc6ZTy/yGstLrYcIdrH0U=          14          12   \n",
       "\n",
       "                                              num_985_sum  num_100_sum  \\\n",
       "msno                                                                     \n",
       "mSM/P4XpWcuQUGnhL0vaCDEGjmM/7YaWew6O/eE5mV4=            0         71.0   \n",
       "q3MXOPoaa2SCN4bnPQ0Jr7o4vuN/F0FVhSLZufI70SM=            2        230.0   \n",
       "GI65XroKbX7GEywRnPDVL7xc6ZTy/yGstLrYcIdrH0U=           14        496.0   \n",
       "\n",
       "                                              num_unq_sum  total_secs_sum  \n",
       "msno                                                                       \n",
       "mSM/P4XpWcuQUGnhL0vaCDEGjmM/7YaWew6O/eE5mV4=           76       19865.240  \n",
       "q3MXOPoaa2SCN4bnPQ0Jr7o4vuN/F0FVhSLZufI70SM=          233       57799.781  \n",
       "GI65XroKbX7GEywRnPDVL7xc6ZTy/yGstLrYcIdrH0U=          481      125386.533  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# user_log_train Preview\n",
    "print('Number of rows  & columns',user_log_train.shape)\n",
    "user_log_train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows  & columns (1103894, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_count</th>\n",
       "      <th>num_25_sum</th>\n",
       "      <th>num_50_sum</th>\n",
       "      <th>num_75_sum</th>\n",
       "      <th>num_985_sum</th>\n",
       "      <th>num_100_sum</th>\n",
       "      <th>num_unq_sum</th>\n",
       "      <th>total_secs_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>u9E91QDTvHLq6NXjEaWv8u4QIqhrHk72kE+w31Gnhdg=</th>\n",
       "      <td>31</td>\n",
       "      <td>407.0</td>\n",
       "      <td>100</td>\n",
       "      <td>87</td>\n",
       "      <td>119</td>\n",
       "      <td>1151.0</td>\n",
       "      <td>1176</td>\n",
       "      <td>348628.540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nTeWW/eOZA/UHKdD5L7DEqKKFTjaAj3ALLPoAWsU8n0=</th>\n",
       "      <td>20</td>\n",
       "      <td>82.0</td>\n",
       "      <td>58</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>261.0</td>\n",
       "      <td>338</td>\n",
       "      <td>72117.966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2UqkWXwZbIjs03dHLU9KHJNNEvEkZVzm69f3jCS+uLI=</th>\n",
       "      <td>31</td>\n",
       "      <td>508.0</td>\n",
       "      <td>55</td>\n",
       "      <td>35</td>\n",
       "      <td>39</td>\n",
       "      <td>959.0</td>\n",
       "      <td>1255</td>\n",
       "      <td>270728.515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              date_count  num_25_sum  \\\n",
       "msno                                                                   \n",
       "u9E91QDTvHLq6NXjEaWv8u4QIqhrHk72kE+w31Gnhdg=          31       407.0   \n",
       "nTeWW/eOZA/UHKdD5L7DEqKKFTjaAj3ALLPoAWsU8n0=          20        82.0   \n",
       "2UqkWXwZbIjs03dHLU9KHJNNEvEkZVzm69f3jCS+uLI=          31       508.0   \n",
       "\n",
       "                                              num_50_sum  num_75_sum  \\\n",
       "msno                                                                   \n",
       "u9E91QDTvHLq6NXjEaWv8u4QIqhrHk72kE+w31Gnhdg=         100          87   \n",
       "nTeWW/eOZA/UHKdD5L7DEqKKFTjaAj3ALLPoAWsU8n0=          58          10   \n",
       "2UqkWXwZbIjs03dHLU9KHJNNEvEkZVzm69f3jCS+uLI=          55          35   \n",
       "\n",
       "                                              num_985_sum  num_100_sum  \\\n",
       "msno                                                                     \n",
       "u9E91QDTvHLq6NXjEaWv8u4QIqhrHk72kE+w31Gnhdg=          119       1151.0   \n",
       "nTeWW/eOZA/UHKdD5L7DEqKKFTjaAj3ALLPoAWsU8n0=            7        261.0   \n",
       "2UqkWXwZbIjs03dHLU9KHJNNEvEkZVzm69f3jCS+uLI=           39        959.0   \n",
       "\n",
       "                                              num_unq_sum  total_secs_sum  \n",
       "msno                                                                       \n",
       "u9E91QDTvHLq6NXjEaWv8u4QIqhrHk72kE+w31Gnhdg=         1176      348628.540  \n",
       "nTeWW/eOZA/UHKdD5L7DEqKKFTjaAj3ALLPoAWsU8n0=          338       72117.966  \n",
       "2UqkWXwZbIjs03dHLU9KHJNNEvEkZVzm69f3jCS+uLI=         1255      270728.515  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# user_log_test Preview\n",
    "print('Number of rows  & columns',user_log_test.shape)\n",
    "user_log_test.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=green>Import/Preview ***Member Data***</font> -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>bd</th>\n",
       "      <th>gender</th>\n",
       "      <th>registered_via</th>\n",
       "      <th>registration_init_time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>msno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rb9UwLQTrxzBVwCB6+bCcSQWZ9JiNLC9dXtM1oEsZA8=</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>2011-09-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>+tJonkh+O1CA796Fm5X60UMOtB6POHAwPjbTRVl/EuU=</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>2011-09-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cV358ssn7a0f7jZOwGNWS07wCKVqxyiImJUX6xcIwKw=</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>2011-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              city  bd gender  registered_via  \\\n",
       "msno                                                                            \n",
       "Rb9UwLQTrxzBVwCB6+bCcSQWZ9JiNLC9dXtM1oEsZA8=     1   0    NaN              11   \n",
       "+tJonkh+O1CA796Fm5X60UMOtB6POHAwPjbTRVl/EuU=     1   0    NaN               7   \n",
       "cV358ssn7a0f7jZOwGNWS07wCKVqxyiImJUX6xcIwKw=     1   0    NaN              11   \n",
       "\n",
       "                                             registration_init_time  \n",
       "msno                                                                 \n",
       "Rb9UwLQTrxzBVwCB6+bCcSQWZ9JiNLC9dXtM1oEsZA8=             2011-09-11  \n",
       "+tJonkh+O1CA796Fm5X60UMOtB6POHAwPjbTRVl/EuU=             2011-09-14  \n",
       "cV358ssn7a0f7jZOwGNWS07wCKVqxyiImJUX6xcIwKw=             2011-09-15  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import Members\n",
    "members = pd.read_csv(path+'members_v3.csv',index_col='msno', parse_dates=['registration_init_time'], dtype={'city':np.int8,'bd':np.int8, 'registered_via':np.int8})\n",
    "members.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=blue>Evaluate Data Consumption</font> -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Dataset:                 Before: 45.56 MB       After: 8.52 MB\n",
      "Test Dataset:                  Before: 44.56 MB       After: 8.33 MB\n",
      "trans_train Dataset:           Before: 1.68 GB        After: 67.76 MB\n",
      "trans_test Dataset:             Before: 112.69 MB      After: 34.27 MB\n",
      "user_log_train Dataset:        Before: 29.78 GB       After: 51.0 MB\n",
      "user_log_test Dataset:        Before: 1.40 GB        After: 50.53 MB\n",
      "Members Dataset:               Before: 417.89 MB      After: 174.31 MB\n",
      "\n",
      "TOTAL:                         Before: 33.48 GB       After: 394.52 MB\n"
     ]
    }
   ],
   "source": [
    "# Check data memory after manual datatype calibration\n",
    "mem = train.memory_usage(index=True).sum()\n",
    "print(f'Train Dataset:                 Before: 45.56 MB       After: {round(mem/1024**2, 2)} MB')\n",
    "mem = test.memory_usage(index=True).sum()\n",
    "print(f'Test Dataset:                  Before: 44.56 MB       After: {round(mem/1024**2, 2)} MB')\n",
    "\n",
    "mem = trans_train.memory_usage(index=True).sum()\n",
    "print(f'trans_train Dataset:           Before: 1.68 GB        After: {round(mem/1024**2, 2)} MB')\n",
    "mem = trans_test.memory_usage(index=True).sum()\n",
    "print(f'trans_test Dataset:             Before: 112.69 MB      After: {round(mem/1024**2, 2)} MB')\n",
    "\n",
    "mem = user_log_train.memory_usage(index=True).sum()\n",
    "print(f'user_log_train Dataset:        Before: 29.78 GB       After: {round(mem/1024**2, 2)} MB')\n",
    "mem = user_log_test.memory_usage(index=True).sum()\n",
    "print(f'user_log_test Dataset:        Before: 1.40 GB        After: {round(mem/1024**2, 2)} MB')\n",
    "\n",
    "mem = members.memory_usage(index=True).sum()\n",
    "print(f'Members Dataset:               Before: 417.89 MB      After: {round(mem/1024**2, 2)} MB\\n')\n",
    "\n",
    "print(f'TOTAL:                         Before: 33.48 GB       After: 394.52 MB')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "~98% Reduction in Data so far. Let's see if we can make more improvements by merging all the datasets into one and then deleting them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - <font color=blue>Merge Data</font> -"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we are given a training and testing set, we will 'Left Join' the other datasets on to these. The Join will be on member id (***msno***)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Number of rows & columns (993554, 22)\n",
      "Train Dataset Size:  127.92 MB\n",
      "Test Number of rows & columns (971310, 22)\n",
      "Test Dataset Size:  163.96 MB\n"
     ]
    }
   ],
   "source": [
    "# Merge Train and Test sets with other data sets\n",
    "\n",
    "train = train.join(trans_train)\n",
    "train = train.join(user_log_train)\n",
    "train = train.join(members)\n",
    "\n",
    "test = test.join(trans_test)\n",
    "test = test.join(user_log_test)\n",
    "test = test.join(members)\n",
    "\n",
    "# Delete datasets after merge and return Train and Test Sizes\n",
    "#del members,trans_train, user_log_train, trans_test, user_log_test \n",
    "\n",
    "print('Train Number of rows & columns',train.shape)\n",
    "mem = train.memory_usage(index=True).sum()\n",
    "print(f'Train Dataset Size:  {round(mem/1024**2, 2)} MB')\n",
    "\n",
    "print('Test Number of rows & columns',test.shape)\n",
    "mem = test.memory_usage(index=True).sum()\n",
    "print(f'Test Dataset Size:  {round(mem/1024**2, 2)} MB')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Delete remaining sets to free up memory\n",
    "del trans_train, user_log_train, trans_test, user_log_test, members"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**33.48 GB all the way down to 291.88 MB!!!!!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## - <font color=blue>Method #2: SQLite </font> -\n",
    "So now that I feeling accomplished and proven by putting myself through such a tast, I want to find a much more practical solution to handling all of this data. Specifically I want a solution that would \"Persist\" outside of the Jupyter Notebook so I can seamlessly to interact with the data without running into any memory errors.\n",
    "\n",
    "I had heard of SQLite a while back but never took the time to play around with it. A server-less database on my SSD hard-drive that has Python integration!? Let's do this!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Connection to SQLite\n",
    "cnx = sqlite3.connect(\"C:\\J-5 Local SSD\\Projects\\KKBox Customer Churn\\Database\\KKBox_DB\")  # Opens file if exists, else creates file\n",
    "cur = connex.cursor()  # This object lets us actually send messages to our DB and receive results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set file path for all Data\n",
    "path = 'C:/J-5 Local SSD/Projects/KKBox Customer Churn/Datasets/'\n",
    "\n",
    "# Create list of all dataset names\n",
    "data_list = ['train_v1', 'train_v2', \"transactions_v1\", 'transactions_v2', 'user_logs_v1', 'user_logs_v2', 'members_v3']\n",
    "\n",
    "for dset in data_list:\n",
    "    for chunk in pd.read_csv(path+dset+'.csv', chunksize=1000000):\n",
    "        chunk.to_sql(name=dset, con=cnx, if_exists=\"append\", index=False)  #\"name\" is name of table "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yup, that's it. Seven simple lines of code and we are done!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
